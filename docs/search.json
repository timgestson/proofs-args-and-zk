[
  {
    "objectID": "posts/CountingTriangles/countingTriangles.html",
    "href": "posts/CountingTriangles/countingTriangles.html",
    "title": "Counting Triangles",
    "section": "",
    "text": "A breakdown of its efficient implementation\nSumcheck is introduced in Chapter 4 of Proofs, Arguments, and Zero-Knowledge as a core building block of Interactive Proofs. The dense chapter outlines the power of Sumcheck, a tool Thaler describes as “the hammer” that makes many Interactive Proof problems look like a nail. Included, are details of how Sumcheck can be used to prove the computation of counting triangles in a graph with little additional work. This is a rare class of proof is considered “Super-Efficient” due to the cost profile of the Prover and Verifier. In this post, we implement the IP’s efficient implementation and break down the code.\n\n\n\n\nAll of the Math in Interactive Proofs and SNARKs happen over a finite field. Here, we define a very simple finite field size \\(2^{61}\\) for this example. We will refer to elements of that field as Felt which is an abbreviation for Field Element.\n\n\nFinite Field Element\nclass Felt:\n    def __init__(self, val, prime=2 ** 61 - 1):\n        self.val = val % prime\n        self.prime = prime\n\n    @classmethod\n    def random(cls, prime=2 ** 61 - 1):\n        return cls(random.randrange(0, prime), prime)\n\n    @classmethod\n    def from_randomness(cls, randomness, prime=2 ** 61 - 1):\n        return cls(int.from_bytes(randomness, \"big\"), prime)\n\n    def __add__(self, felt):\n        assert self.prime == felt.prime\n        return Felt((self.val + felt.val) % self.prime, self.prime)\n\n    def __sub__(self, felt):\n        assert self.prime == felt.prime\n        return Felt((self.val - felt.val) % self.prime, self.prime)\n\n    def inv(self):\n        if self.val == 0:\n            return Felt(0, self.prime)\n        return self ** (self.prime - 2)\n\n    def __mul__(self, felt):\n        assert self.prime == felt.prime\n        return Felt((self.val * felt.val) % self.prime, self.prime)\n\n    def __pow__(self, degree):\n        n = degree % (self.prime - 1)\n        num = pow(self.val, n, self.prime)\n        return Felt(num, self.prime)\n\n    def __eq__(self, other):\n        return self.val == other.val\n\n\n\n\n\nMultilinear polynomials can be specified by their evaluations over the boolean hypercube. Thaler gives an efficient formula to evaluate a multilinear polynomial at a single point given the hypercube evaluations using dynamic programing.\n\n\nEvaluate Multilinear Extension\ndef eval_mle(evals, point):\n    def memo(r, n):\n        if n == 1:\n            return [(Felt(1) - r[0]), r[0]]\n        return [\n            x\n            for expr in memo(r, n - 1)\n            for x in [expr * (Felt(1) - r[n - 1]), expr * r[n - 1]]\n        ]\n\n    cache = memo(point, len(point))\n    return sum([x * y for (x, y) in zip(evals, cache)], Felt(0))\n\n\n\n\n\nUnivariate polynomials can be specified by \\(degree(n) + 1\\) points. We can use lagrange interpolation and rely on cancellations and batch inversions to achieve fast evaluations of a polynomial defined by its evaluations from \\(0..degree(n)\\).\n\n\nEvaluate Low-Degree Extension\ndef eval_ule(evals, r):\n    if 0 <= r.val < len(evals):\n        return evals[r.val]\n\n    total, multiplier, inversions = Felt(0), Felt(1), Felt(1)\n\n    for k in range(1, len(evals)):\n        multiplier *= r - Felt(k)\n        inversions *= Felt(-k)\n\n    multiplier *= inversions.inv()\n    total += multiplier * evals[0]\n\n    for i in range(1, len(evals)):\n        multiplier *= (\n            (r - Felt(i - 1))\n            * ((r - Felt(i)) * Felt(i)).inv()\n            * Felt(-(len(evals) - i))\n        )\n        total += multiplier * evals[i]\n\n    return total\n\n\n\n\n\nThe boolean hypercube is all combinations of \\(0\\) and \\(1\\) for a given \\(n\\) which defines the length. Sumcheck verifies the sum of a polynomials evaluation over the boolean hypercube.\n\n\nThe Boolean Hypercube\nfrom itertools import product\ndef hypercube(n):\n    return [list(i) for i in product([Felt(0), Felt(1)], repeat=n)]\n\n\n\n\n\nIn order to make the protocol in this post non-interactive, the Prover creates a transcript that the Verifier can use to verify the Prover’s computations. The Prover must draw verifiable randomness from a hashchain of public inputs and intermediate elements of the protocol.\n\n\nExample Transcript Class\nclass SumcheckTranscript:\n    def __init__(self, hashchain=None):\n        self.hashchain = hashchain or sha256()\n        self.evaluations = []\n        self.degree = None\n        self.rounds = None\n        self.randoms = []\n\n    def write_evaluations(self, lst):\n        for f in lst:\n            self.hashchain.update(f.val.to_bytes(8, \"big\"))\n        self.evaluations.append(lst)\n\n    def write_sum(self, c):\n        self.hashchain.update(c.val.to_bytes(8, \"big\"))\n        self.sum = c\n\n    def write_degree(self, d):\n        self.hashchain.update(d.to_bytes(2, \"big\"))\n        self.degree = d\n\n    def write_random(self, r):\n        self.hashchain.update(r.val.to_bytes(8, \"big\"))\n        self.randoms.append(r)\n\n    def write_rounds(self, rounds):\n        self.hashchain.update(rounds.to_bytes(2, \"big\"))\n        self.rounds = rounds\n\n    def randomness(self):\n        return self.hashchain.digest()"
  },
  {
    "objectID": "posts/CountingTriangles/countingTriangles.html#sumcheck",
    "href": "posts/CountingTriangles/countingTriangles.html#sumcheck",
    "title": "Counting Triangles",
    "section": "Sumcheck",
    "text": "Sumcheck\n\nThe Efficient Prover\nWhen the sumcheck polynomial \\(g\\) is made up of the product of many different multilinear polynomials (in the form of \\(g = p_1 * p_2 ... p_k\\)), the prover can take advantage of a huge optimizations. The evaluations of \\(p_i\\) can be stored separately in the Prover’s internal data structure. Our implementation covers the scenario for when \\(g = p_1 * p_2\\) because that is all that is needed for counting triangles.\n\n\nclass SumcheckProver:\n\n    def __init__(self, p1, p2, c, randomness=None):\n        self.rounds = int(log2(len(p1)))\n        self.transcript = SumcheckTranscript(randomness)\n        self.c = c\n        self.p1 = p1\n        self.p2 = p2\n        self.rs = []\n\n\nWe start the Prover by storing the evaluations of \\(p_1\\) and \\(p_2\\). Each round we can half the data structure leveraging Leema 3.8’s \\[p(x_1,x_2,...,x_l) = x_1 · p(1,x_2,...,x_l)+(1−x_1)· p(0,x_2,...,x_l)\\] Below is a visual from the book.\n\n\n\nSource: Proofs, Arguments, and Zero-Knowledge\n\n\nThe Prover now sets \\(x_i\\) to \\(r\\) and updates its data structure in-place. Just like in the picture, we can divide the evaluations in half and zip those together in order to get the values we need for Lemma 3.8.\n\n\n    def execute_round(self, r):\n        self.rs.append(r)\n        half = len(self.p1) // 2\n        self.p1 = [\n            (Felt(1) - r) * a + r * b for (a, b) in zip(self.p1[:half], self.p1[half:])\n        ]\n        self.p2 = [\n            (Felt(1) - r) * a + r * b for (a, b) in zip(self.p2[:half], self.p2[half:])\n        ]\n        self.transcript.write_evaluations(self.evaluate_points())\n\n\nThe power of this is that we no longer have to sum up \\(x_{i+1}..x_l\\) on the hypercube to get the polynomial \\(S_i\\) to send to the prover. We can take advantage of the properties of the multilinear polynomial in order to save the Prover significant time.\n\n\n    def evaluate_points(self):\n        half = len(self.p1) // 2\n        zero, one, two = Felt(0), Felt(0), Felt(0)\n        for i in range(half):\n            zero += self.p1[i] * self.p2[i]\n            one += self.p1[half + i] * self.p2[half + i]\n            two += (Felt(2) * self.p1[half + i] - self.p1[i]) * (\n                Felt(2) * self.p2[half + i] - self.p2[i]\n            )\n        return [zero, one, two]\n\n\nSince the product of 2 multilinear polynomials will be quadratic (degree 2), we can specify \\(S_i\\) it by sending 3 points to the Verifier. Thaler gives us a way to do this in a single pass by using the fact that the leading bit will be \\(0\\) for the first half of the evaluations and \\(1\\) for the second half. When there is only a single evaluation we handle the exception and send back the single point surrounded by zeros.\nTo get \\(S_i(2)\\), we leverage Equation 4.13 \\[h(r_1,...,r_{i−1},2,b_{i+1},...,b_l) = 2·h(r_1,...,r_{i−1},1,b_{i+1},...,b_l)−h(r_1,...,r_{i−1},0,b_{i+1},...,b_l)\\] We take this opportunity to multiply the \\(p_1\\) and \\(p_2\\) together in order to provide the correct \\(S_i\\) to the Verifier.\n\n\nThe Verifier\nThe Verifier can take these sumcheck claims and make sure the Prover is being honest by verifying round by round that the polynomial \\(S_i(0)\\) and \\(S_i(1)\\) sum to the correct values and that \\(degree(S_i) <= degree(g)\\). We implemented the verifier to verify the entire fiat-shamir transcript at once.\n\n\n    def verify(self):\n        assert self.transcript.sum == eval_ule(\n            self.transcript.evaluations[0], Felt(0)\n        ) + eval_ule(self.transcript.evaluations[0], Felt(1))\n        assert len(self.transcript.evaluations[0]) <= self.transcript.degree + 1\n\n        for i in range(self.transcript.rounds-1):\n            g_l = eval_ule(self.transcript.evaluations[i], self.transcript.randoms[i])\n            assert len(self.transcript.evaluations[i + 1]) <= self.transcript.degree + 1\n            g_r = eval_ule(self.transcript.evaluations[i + 1], Felt(0)) + eval_ule(\n                self.transcript.evaluations[i + 1], Felt(1)\n            )\n            assert g_l == g_r\n\n\nAt the end of Sumcheck Protocol, the Verifier must also evaluate an oracle of \\(g(r_1..r_{log(n)})\\) to complete the verification, but many times how this is done is dependent on the larger protocol so we left it out of the scope of this Verifier."
  },
  {
    "objectID": "posts/CountingTriangles/countingTriangles.html#counting-triangles",
    "href": "posts/CountingTriangles/countingTriangles.html#counting-triangles",
    "title": "Counting Triangles",
    "section": "Counting Triangles",
    "text": "Counting Triangles\nAn efficient way to caluculate the number of triangles in a graph is to take the adjacency matrix and square it, then multiply it by the adjacency matrix again and divide by 6. \\[Triangles = (adj^2 * adj) / 6\\] Using Sumcheck and the Super-Efficient IP for MatMult protocol which Thaler outlines in Section 4.4, we can Prove the calculation of the Triangle count with a small amount of extra work for the party computing the count.\n\nThe Calculation\nLet’s calculate the number of triangles in a square that is bisected by a line to form 2 triangles.\n\n\nGraph definition\nclass Graph(dict):\n    def __init__(self, graph):\n        super().__init__(graph)\n\n    def toAdjacencyMatrix(self):\n        n = len(self)\n        matrix = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                matrix[i][j] = (\n                    1 if j in self[i] else 0\n                )\n        return matrix\n\n\ng = Graph({0: {1, 2}, 1: {2, 0, 3}, 2: {0, 1, 3}, 3: {2, 1}})\n\na = g.toAdjacencyMatrix()\n\nn = len(a)\n\na2 = [[0] * n for _ in range(n)]\n\nfor i in range(n):\n    for j in range(n):\n        for k in range(n):\n            a2[i][j] += a[i][k] * a[k][j]\nc = 0\n\nfor i in range(n):\n    for j in range(n):\n        c += a[i][j] * a2[i][j]\n\nc // 6\n\n\nThe Prover\nThe Prover already had to compute \\(\\tilde{a}^2\\) and \\(\\tilde{a}\\) as part of its normal computation. We can use these values to compute a proof as well thanks to Sumcheck and the MatMult Protocol. We initiate the Counting Triangles Proof using these values along with \\(c\\).\n\n\nclass TriangleProver:\n    def __init__(self, a, a2, c):\n        self.a = a\n        self.a2 = a2\n        self.c = c\n        self.logn = int(log2(len(self.a)))\n        self.transcript = TrianglesTranscript()\n        self.transcript.write_a(self.a)\n\n\n\nNow we have to proove \\(\\tilde{a}^2 * \\tilde{a}\\) as the first phase of the protocol. We instantiate sumcheck and create a proof to add to the Counting Triangles transcript.\n\n\n    def prove(self):\n        p1 = SumcheckProver(\n            self.a2,\n            self.a,\n            self.c,\n            self.transcript.hashchain.copy(),\n        )\n        p1.prove()\n        self.transcript.add_transcript(p1.transcript)\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe transcript.hashchain.copy() is just an implementation detail to make sure that the randomness is generated from a single fiat-shamir hashchain.\n\n\nNow that we have proved that computation, Thaler explains that we need to also prove that the \\(a^2\\) matrix was calculated correctly before we can make the final verification assertions. To do this, we run the MatMult IP.\n\n\n\n        rands = p1.transcript.randoms\n        (i, j) = (rands[: len(rands) // 2], rands[len(rands) // 2 :])\n\n        p2 = SumcheckProver(\n            [eval_mle(self.a, i + hc) for hc in hypercube(self.logn // 2)],\n            [eval_mle(self.a, hc + j) for hc in hypercube(self.logn // 2)],\n            eval_mle(self.a2, i + j),\n            p1.transcript.hashchain.copy(),\n        )\n        p2.prove()\n        self.transcript.add_transcript(p2.transcript)\n\n\n\nWe take the \\(r\\)s that the prover commited to in the first round of Sumcheck and set them to \\(i\\) and \\(j\\). Notice that we connot just pass in evaluations as-is like we did in the first Sumcheck instance. The MatMult IP is defined by: \\[fc(i,j)=∑{k\\in{\\{0,1\\}}} ^{log(n)} fa(i,k)·fb(k,j)\\] Here, \\(\\tilde{a}\\) is eqaul to \\(fa\\) and \\(fb\\) and we are summing up on the hypercube in order to instantiate a SumCheck instance that forces the Prover to commit to \\(k\\).\nNow that we have run sumcheck, we have \\(i\\), \\(j\\), and \\(k\\) so we theoretically have given the Verifier enough information to prove the validity of the computation. We would just need to evaluate \\(\\tilde{a}(i+j)\\), \\(\\tilde{a}(k+j)\\), and \\(\\tilde{a}(i+k)\\) to complete the Verification. This is alot of work for the Verifier though and it turns out that it can instead be done by the Prover.\n\n\nThe Useful Subroutine\nThaler describes a useful subroutine which allows work to be offloaded from the Verifier to the Prover. Let declare \\(\\ell\\) as the line going through points \\(\\tilde{W}(a)\\), \\(\\tilde{W}(b)\\), and \\(\\tilde{W}(c)\\). By making the Prover specify a polynomial \\(\\tilde{W}\\) constrained to \\(\\ell\\), the verifier can prove the validity of \\(\\tilde{W}(a)\\), \\(\\tilde{W}(b)\\), and \\(\\tilde{W}(c)\\) by evaluating \\(\\tilde{W} \\circ \\ell\\) (aka \\(q\\)) at a single random point \\(r\\). In our case, \\(\\tilde{a}\\) is \\(\\tilde{W}\\) so we will continue with \\(\\tilde{W}\\) for clarity.\n\n\n    def line_subroutine(self, a, b, c):\n        ts = list(zip(a, b, c))\n        w = self.a\n        q = [\n            eval_mle(w, [eval_ule(t, Felt(i)) for t in ts])\n            for i in range(0, 2 * self.logn + 1)\n        ]\n        return q\n\n\nIn order to specify the polynomial \\(q\\), the Prover must send \\(2 * log(n) + 1\\) points to the Verifier. An optimization in this implementation is the fact that we already know that \\(q(0)\\), \\(q(1)\\), and \\(q(2)\\) are equal to \\(\\tilde{W}(a)\\), \\(\\tilde{W}(b)\\), and \\(\\tilde{W}(c)\\). The remaining points can calculated by evaluating \\(\\tilde{W}\\) at the polynomial \\(t_i\\) where \\(t_i\\) equals the line defined by \\(t_i(0)=a_i\\), \\(t_i(1)=b_i\\), and \\(t_i(2)=c_i\\). We can easily calulate all \\(t_i\\) by zipping together \\(a\\), \\(b\\), and \\(c\\) then viewing each entry as polynomial specified by a low degree extension.\n\n\n        w = self.transcript.a\n\n        wa = eval_ule(q, Felt(0))\n        wb = eval_ule(q, Felt(1))\n        wc = eval_ule(q, Felt(2))\n\n        ra = Felt.random()\n        ts = list(zip(i + j, k + j, i + k))\n        r = [eval_ule(t, ra) for t in ts]\n\n        assert len(q) <= 2 * len(i + j) + 1\n        assert eval_ule(q, ra) == eval_mle(w, r)\n\n\n\nThe Verifier needs \\(\\tilde{W}(a)\\), \\(\\tilde{W}(b)\\), and \\(\\tilde{W}(c)\\) in order to perform the last verification step of the Counting Triangles IP. By recieving \\(q\\) from the Prover, the Verifier knows that it recieved those values as \\(q(0)\\), \\(q(1)\\), and \\(q(2)\\). To be convinced that the values that she recieved were correct, the verifier picks a random field element \\(r*\\) (ra in the source code), and uses it to create a point \\(r\\) that is on line \\(\\ell\\). The Verifier is convinced of \\(\\tilde{W}(a)\\), \\(\\tilde{W}(b)\\), and \\(\\tilde{W}(c)\\) if \\(q\\) is a maximum degree of \\(2 * log(n)\\) and if \\(q(r*) == \\tilde{W}(r)\\).\n\n\nThe Final Assertion\nNow that we have forced the Prover to give us the values we need with little additional work, we can complete the verification.\n\n\n        assert wa * claimed_a2 == eval_ule(prover1_round_gv, prover1_round_v)\n        assert wb * wc == eval_ule(prover2_round_gv, prover2_round_v)\n\n\nWe make sure that the values that are claimed in the final round of each instance of Sumcheck align with what we now know about \\(\\tilde{W}(a)\\), \\(\\tilde{W}(b)\\), and \\(\\tilde{W}(c)\\)."
  },
  {
    "objectID": "posts/CountingTriangles/countingTriangles.html#links",
    "href": "posts/CountingTriangles/countingTriangles.html#links",
    "title": "Counting Triangles",
    "section": "Links",
    "text": "Links\nSource Code\nProofs, Arguments, and Zero-Knowledge by Justin Thaler"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "Counting Triangles\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nNo matching items"
  }
]